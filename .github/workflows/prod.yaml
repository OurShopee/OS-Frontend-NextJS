name: Deploy prod main React App

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to execute workflow on'
        required: true
        default: 'main'  # Set a default branch  

jobs:
  build-and-deploy-main:
    runs-on: ubuntu-latest

    steps:
      - name: Check if user is allowed
        run: |
          ALLOWED_USERS=("ankush-ourshopee" "HarishSharma4782" "ankitsura"  "aayushourshopee" "tek-thapa-ourshopee")  # Add allowed GitHub usernames here
          if [[ ! " ${ALLOWED_USERS[@]} " =~ " ${GITHUB_ACTOR} " ]]; then
            echo "You are not authorized to trigger this workflow."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1          

      - name: Fetch .env from Secret Manager
        run: |
          rm -rf .env*
          SECRET_NAME="prodos/ourshopee/next-FE"
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --region ap-south-1 --query SecretString --output text)
          echo "$SECRET_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' > .env

      - name: Upload build and backups to S3
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "Backing up current prod build to s3://ourshopee-build-backup/next-fe/backup/$TIMESTAMP"
          S3_BACKUP_BASE=s3://ourshopee-build-backup/next-fe/backup/$TIMESTAMP
          aws s3 sync s3://ourshopee-build-backup/next-fe/prod/ $S3_BACKUP_BASE
          aws s3 sync s3://ourshopee-build-backup/storefront/next-prod/ $S3_BACKUP_BASE/public/react-build 
          aws s3 sync .env $S3_BACKUP_BASE/.env
          aws s3 sync . s3://ourshopee-build-backup/next-fe/prod/ --delete

          echo "Cleaning old backups..."
          BACKUPS=$(aws s3 ls $S3_BACKUP_BASE/ | awk '{print $2}' | sort)
          COUNT=$(echo "$BACKUPS" | wc -l)
          DEL=$(($COUNT - 3))
          if [ $DEL -gt 0 ]; then echo "$BACKUPS" | head -n $DEL | while read OLD; do aws s3 rm --recursive $S3_BACKUP_BASE/$OLD > /dev/null 2>&1; done; fi

      - name: Get EC2 Instance IDs by Tag
        id: get-instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=prod-nextjs-fe" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV
          echo "Target instances: $INSTANCE_IDS"

      - name: Trigger SSM to sync from S3 to EC2
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy NextJS prod build to EC2" \
            --parameters '{
                "commands":[
                    "APP_DIR=/usr/share/nginx/html/frontend/",
                    "APP_DIR1=/usr/share/nginx/html/frontend1/",
                    "S3_PROD=s3://ourshopee-build-backup/next-fe/prod/",
                    "S3_REACT_PROD=s3://ourshopee-build-backup/storefront/next-prod/",    
                    "TIMESTAMP=$(date +%Y%m%d%H%M%S)",
                    "S3_BACKUP_BASE=s3://ourshopee-build-backup/next-fe/backup/$TIMESTAMP",             
                    "SECRET_NAME=prodos/ourshopee/next-FE",
                    "REGION=ap-south-1",
                    
                    "echo Syncing latest build...",
                    "mkdir -p $APP_DIR1",
                    "aws s3 sync $S3_PROD $APP_DIR1 --delete > /dev/null 2>&1",
                    "aws s3 sync $S3_REACT_PROD $APP_DIR1/public/react-build/ --delete > /dev/null 2>&1",
                    "aws s3 sync s3://ourshopee-build-backup/storefront/production/.well-known/ $APP_DIR1.well-known/ > /dev/null", 

                    "aws secretsmanager get-secret-value --secret-id \"$SECRET_NAME\" --region \"$REGION\" --query SecretString --output text | jq -r '\''to_entries[] | \"\\(.key)=\\(.value)\"'\'' > $APP_DIR1/.env",

                    "cd $APP_DIR1",
                    "echo Installing Dev deps...",
                    "npm install --force > /dev/null 2>&1",
                    "CI=false NODE_OPTIONS=\"--max-old-space-size=4096\" npm run build > /dev/null 2>&1",
                    "chown -R ec2-user:ec2-user $APP_DIR1",
                    "rm -rf $APP_DIR",
                    "mv $APP_DIR1 $APP_DIR",

                    "echo Restarting PM2 and Nginx process...",
                    "sudo systemctl restart nginx",
                    "su - ec2-user -c '"'"'cd /usr/share/nginx/next-fe.ourshopee.com/ && PORT=4000 pm2 restart next-fe --update-env  || PORT=4000 pm2 start npm --name  next-fe --update-env  -- run start || pm2 list'"'"' ",
                    "sudo date > /usr/share/nginx/next-fe.ourshopee.com.txt"
                ]
            }' \
            --instance-ids ${{ env.INSTANCE_IDS }} \
            --region ap-south-1 \
            --timeout-seconds 600 \
            --max-concurrency "50" \
            --max-errors "0"